-- ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏° hop low server, ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ, ‡πÅ‡∏•‡∏∞ reset ‡∏ï‡∏±‡∏ß‡∏ñ‡πâ‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏¥

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local PlaceId = game.PlaceId

-- üïì ‡∏£‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏ü‡∏ó‡∏∏‡∏Å ‡πÜ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ
local hopInterval = 2.5 * 60 * 60 -- ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
local lastHopTime = tick()

-- üì¶ hop server
local function hopLowServer()
    local servers = {}
    local success, result = pcall(function()
        return game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
    end)
    if success and result and result.data then
        for _, server in ipairs(result.data) do
            if server.playing < server.maxPlayers then
                table.insert(servers, server)
            end
        end
        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, servers[1].id, LocalPlayer)
        end
    end
end

-- ‚è±Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á
local lastMoveTime = tick()
local function resetCharacter()
    if LocalPlayer.Character then
        LocalPlayer.Character:BreakJoints()
    end
end

-- üé° ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
local function rotateCamera()
    local camera = workspace.CurrentCamera
    camera.CFrame = camera.CFrame * CFrame.Angles(0, math.rad(math.random(-90,90)), 0)
end

-- üßç‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô
local function randomWalk()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("Humanoid") then
        local humanoid = char.Humanoid
        local dir = Vector3.new(math.random(-10,10), 0, math.random(-10,10))
        humanoid:Move(dir, false)
        lastMoveTime = tick()
    end
end

-- ü¶ò ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å ‡πÜ
local function jump()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("Humanoid") then
        char.Humanoid.Jump = true
    end
end

-- üö≤ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ
local proximityRange = 30
local function checkNearbyBikes()
    local myChar = LocalPlayer.Character
    if not myChar or not myChar:FindFirstChild("HumanoidRootPart") then return end
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (myChar.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.SeatPart and humanoid.SeatPart:IsDescendantOf(workspace) then
                local seatName = humanoid.SeatPart.Name:lower()
                if seatName:find("bike") or seatName:find("cycle") then
                    if distance <= proximityRange then
                        hopLowServer()
                    end
                end
            end
        end
    end
end

-- üîÅ loop ‡∏´‡∏•‡∏±‡∏Å
spawn(function()
    while true do
        randomWalk()
        wait(math.random(4, 7))
        if math.random() < 0.3 then jump() end
        if tick() - lastMoveTime > 30 then resetCharacter() end
        if tick() - lastHopTime > hopInterval then
            lastHopTime = tick()
            hopLowServer()
        end
    end
end)

-- üîÅ loop ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏•‡πâ‡∏≠‡∏á + ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô
spawn(function()
    while true do
        rotateCamera()
        checkNearbyBikes()
        wait(8)
    end
end)

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏≠ character ‡πÄ‡∏ï‡πá‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
repeat wait() until LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
