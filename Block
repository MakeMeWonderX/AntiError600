if not getgenv().debug then getgenv().debug = {} end
getgenv().debug.traceback = getgenv().debug.traceback or function(message, level) return message end
wait(.1)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local lastMoved = tick()

-- üß≠ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
function randomWalk()
	local direction = Vector3.new(math.random(-1, 1), 0, math.random(-1, 1)).Unit
	local moveSpeed = 8
	local duration = math.random(2, 4)

	Character:PivotTo(CFrame.new(Character:GetPivot().Position) * CFrame.new(direction * moveSpeed))
	wait(duration)

	-- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏±‡∏ö
	lastMoved = tick()
end

-- ‚õ∑Ô∏è ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏´‡∏•‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
function jumpIfObstacle()
	local rayOrigin = Character:GetPivot().Position
	local rayDirection = Character:GetPivot().LookVector * 4

	local raycastResult = workspace:Raycast(rayOrigin, rayDirection, RaycastParams.new())
	if raycastResult then
		Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	end
end

-- üîÑ ‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≠‡∏ó‡∏∏‡∏Å 8 ‡∏ß‡∏¥
task.spawn(function()
	while true do
		wait(8)
		local root = Character:FindFirstChild("HumanoidRootPart")
		if root then
			root.CFrame = root.CFrame * CFrame.Angles(0, math.rad(math.random(-45, 45)), 0)
		end
	end
end)

-- üïí Hop ‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ñ‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á
task.spawn(function()
	while true do
		wait(9000) -- 2.5 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á = 9000 ‡∏ß‡∏¥
		local TeleportService = game:GetService("TeleportService")
		local PlaceId = game.PlaceId

		local function hopLowServer()
			local servers = {}
			local req = syn and syn.request or http_request or request
			local body = req({
				Url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100",
				Method = "GET"
			})
			local data = game:GetService("HttpService"):JSONDecode(body.Body)
			for _, server in pairs(data.data) do
				if server.playing < server.maxPlayers then
					TeleportService:TeleportToPlaceInstance(PlaceId, server.id, LocalPlayer)
					break
				end
			end
		end

		hopLowServer()
	end
end)

-- üéÆ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
while true do
	randomWalk()
	jumpIfObstacle()
	wait(1)
end
